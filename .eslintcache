[{"/Users/lauraningel/Desktop/final-project/src/reportWebVitals.js":"1","/Users/lauraningel/Desktop/final-project/src/index.js":"2","/Users/lauraningel/Desktop/final-project/src/App.js":"3","/Users/lauraningel/Desktop/final-project/src/components/NavBar.js":"4","/Users/lauraningel/Desktop/final-project/src/components/Login.js":"5","/Users/lauraningel/Desktop/final-project/src/components/Signup.js":"6","/Users/lauraningel/Desktop/final-project/src/utils/auth.js":"7","/Users/lauraningel/Desktop/final-project/src/components/ProtectedRoute.js":"8","/Users/lauraningel/Desktop/final-project/src/components/Events/Events.js":"9","/Users/lauraningel/Desktop/final-project/src/components/Events/EventDetail.js":"10","/Users/lauraningel/Desktop/final-project/src/components/Events/FormAddEvent.js":"11","/Users/lauraningel/Desktop/final-project/src/components/Events/SearchEvents.js":"12","/Users/lauraningel/Desktop/final-project/src/components/NotFound.js":"13","/Users/lauraningel/Desktop/final-project/src/components/Events/ModalUpdateEvent.js":"14","/Users/lauraningel/Desktop/final-project/src/components/Events/FormUpdateEvent.js":"15","/Users/lauraningel/Desktop/final-project/src/components/User/Users.js":"16","/Users/lauraningel/Desktop/final-project/src/components/User/UserProfile.js":"17","/Users/lauraningel/Desktop/final-project/src/components/User/UserEventSection.js":"18","/Users/lauraningel/Desktop/final-project/src/components/Plants/PlantDetail.js":"19","/Users/lauraningel/Desktop/final-project/src/components/Plants/FormUpdatePlant.js":"20","/Users/lauraningel/Desktop/final-project/src/components/Events/ModalAddEvent.js":"21","/Users/lauraningel/Desktop/final-project/src/components/Plants/PlantRepo.js":"22","/Users/lauraningel/Desktop/final-project/src/components/Plants/PlantCatalog.js":"23","/Users/lauraningel/Desktop/final-project/src/components/Plants/ModalUpdatePlant.js":"24","/Users/lauraningel/Desktop/final-project/src/components/User/VisitedProfile.js":"25","/Users/lauraningel/Desktop/final-project/src/components/User/Messenger.js":"26","/Users/lauraningel/Desktop/final-project/src/components/Plants/FormAddPlant.js":"27","/Users/lauraningel/Desktop/final-project/src/components/Plants/ModalWishlist.js":"28","/Users/lauraningel/Desktop/final-project/src/components/Plants/SearchCatalog.js":"29","/Users/lauraningel/Desktop/final-project/src/contexts/ConversationsProvider.js":"30","/Users/lauraningel/Desktop/final-project/src/components/Plants/ModalRepo.js":"31","/Users/lauraningel/Desktop/final-project/src/contexts/SocketProvider.js":"32"},{"size":362,"mtime":1606142850419,"results":"33","hashOfConfig":"34"},{"size":572,"mtime":1606306528206,"results":"35","hashOfConfig":"34"},{"size":12712,"mtime":1614942899926,"results":"36","hashOfConfig":"34"},{"size":3273,"mtime":1614950225312,"results":"37","hashOfConfig":"34"},{"size":4187,"mtime":1614950225311,"results":"38","hashOfConfig":"34"},{"size":3246,"mtime":1614950225324,"results":"39","hashOfConfig":"34"},{"size":2110,"mtime":1614950225332,"results":"40","hashOfConfig":"34"},{"size":1462,"mtime":1614857451160,"results":"41","hashOfConfig":"34"},{"size":7796,"mtime":1614954415510,"results":"42","hashOfConfig":"34"},{"size":7145,"mtime":1614950225305,"results":"43","hashOfConfig":"34"},{"size":4733,"mtime":1614954428799,"results":"44","hashOfConfig":"34"},{"size":674,"mtime":1614950225310,"results":"45","hashOfConfig":"34"},{"size":1221,"mtime":1614869091163,"results":"46","hashOfConfig":"34"},{"size":1326,"mtime":1610109320216,"results":"47","hashOfConfig":"34"},{"size":5191,"mtime":1614954440476,"results":"48","hashOfConfig":"34"},{"size":3022,"mtime":1614955758634,"results":"49","hashOfConfig":"34"},{"size":11913,"mtime":1614955794801,"results":"50","hashOfConfig":"34"},{"size":4574,"mtime":1614868698896,"results":"51","hashOfConfig":"34"},{"size":7236,"mtime":1614955630251,"results":"52","hashOfConfig":"34"},{"size":6286,"mtime":1614954501293,"results":"53","hashOfConfig":"34"},{"size":1158,"mtime":1614950225309,"results":"54","hashOfConfig":"34"},{"size":4926,"mtime":1614955604253,"results":"55","hashOfConfig":"34"},{"size":3548,"mtime":1614950225319,"results":"56","hashOfConfig":"34"},{"size":1330,"mtime":1614950225317,"results":"57","hashOfConfig":"34"},{"size":9088,"mtime":1614955728312,"results":"58","hashOfConfig":"34"},{"size":9464,"mtime":1614955827552,"results":"59","hashOfConfig":"34"},{"size":5964,"mtime":1614954491201,"results":"60","hashOfConfig":"34"},{"size":1180,"mtime":1614950225318,"results":"61","hashOfConfig":"34"},{"size":659,"mtime":1614693014126,"results":"62","hashOfConfig":"34"},{"size":2198,"mtime":1614950225329,"results":"63","hashOfConfig":"34"},{"size":1284,"mtime":1614772106403,"results":"64","hashOfConfig":"34"},{"size":657,"mtime":1614954946876,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"tv9s6g",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"/Users/lauraningel/Desktop/final-project/src/reportWebVitals.js",[],["146","147"],"/Users/lauraningel/Desktop/final-project/src/index.js",[],["148","149"],"/Users/lauraningel/Desktop/final-project/src/App.js",[],"/Users/lauraningel/Desktop/final-project/src/components/NavBar.js",[],"/Users/lauraningel/Desktop/final-project/src/components/Login.js",[],["150","151"],"/Users/lauraningel/Desktop/final-project/src/components/Signup.js",[],["152","153"],"/Users/lauraningel/Desktop/final-project/src/utils/auth.js",[],"/Users/lauraningel/Desktop/final-project/src/components/ProtectedRoute.js",[],["154","155"],"/Users/lauraningel/Desktop/final-project/src/components/Events/Events.js",[],"/Users/lauraningel/Desktop/final-project/src/components/Events/EventDetail.js",[],"/Users/lauraningel/Desktop/final-project/src/components/Events/FormAddEvent.js",["156"],"import React, { useState } from \"react\";\nimport { Grid, TextField, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles({\n  formInputs: {\n    width: \"100%\",\n  },\n});\n\nexport default function FormAddEvent({\n  setMyEvents,\n  handleClose,\n  setAllEvents,\n}) {\n  const classes = useStyles();\n\n  // STATE FORM INPUT\n  const [eventInput, setEventInput] = useState({\n    title: \"\",\n    date: \"\",\n    time: \"15:30\",\n    description: \"\",\n    street: \"\",\n    number: \"\",\n    zip: \"\",\n    city: \"\",\n    img: Math.floor(Math.random() * 6) + 1,\n  });\n\n  // HANDLE FORM INPUT\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setEventInput((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // ADD NEW EVENT TO DB\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    axios\n      .post(`/api/events`, eventInput)\n      .then((res) => {\n        setAllEvents((prevEvents) => [...prevEvents, res.data]);\n        setMyEvents((prevEvents) => [...prevEvents, res.data]);\n      })\n      .catch((err) => console.log(err));\n    handleClose(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <TextField\n            className={classes.formInputs}\n            name=\"title\"\n            label=\"Title\"\n            variant=\"outlined\"\n            type=\"text\"\n            margin=\"dense\"\n            onChange={handleChange}\n            required={true}\n            inputProps={{ maxLength: 24 }}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            className={classes.formInputs}\n            id=\"outlined-multiline-static\"\n            name=\"description\"\n            label=\"Description\"\n            multiline\n            rows={4}\n            margin=\"dense\"\n            variant=\"outlined\"\n            onChange={handleChange}\n            required={true}\n            inputProps={{ maxLength: 400 }}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            className={classes.formInputs}\n            name=\"date\"\n            label=\"Date\"\n            variant=\"outlined\"\n            type=\"date\"\n            margin=\"dense\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            onChange={handleChange}\n            InputProps={{\n              inputProps: { min: new Date().toISOString().slice(0, 10) },\n            }}\n            required={true}\n          />\n        </Grid>\n        <TextField\n          className={classes.formInputs}\n          name=\"time\"\n          label=\"Time\"\n          variant=\"outlined\"\n          type=\"time\"\n          margin=\"dense\"\n          defaultValue=\"15:30\"\n          variant=\"outlined\"\n          InputLabelProps={{\n            shrink: true,\n            step: 300, // 5min\n          }}\n          // inputProps={{\n          //   step: 300, // 5 min\n          // }}\n          onChange={handleChange}\n          required={true}\n        />\n        <Grid item xs={6}>\n          <TextField\n            className={classes.formInputs}\n            name=\"street\"\n            label=\"Street\"\n            variant=\"outlined\"\n            type=\"text\"\n            margin=\"dense\"\n            onChange={handleChange}\n            required={true}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            className={classes.formInputs}\n            name=\"number\"\n            label=\"Number\"\n            variant=\"outlined\"\n            type=\"text\"\n            margin=\"dense\"\n            inputProps={{\n              pattern: \"^[0-9]*$\",\n            }}\n            onChange={handleChange}\n            required={true}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            className={classes.formInputs}\n            name=\"zip\"\n            label=\"Zip code\"\n            variant=\"outlined\"\n            type=\"text\"\n            margin=\"dense\"\n            inputProps={{\n              pattern: \"^[0-9]*$\",\n            }}\n            onChange={handleChange}\n            required={true}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            className={classes.formInputs}\n            name=\"city\"\n            label=\"City\"\n            variant=\"outlined\"\n            type=\"text\"\n            margin=\"dense\"\n            onChange={handleChange}\n            required={true}\n          />\n        </Grid>\n        <Button\n          variant=\"outlined\"\n          type=\"submit\"\n          className={classes.formInputs}\n          style={{ marginTop: \"2em\" }}\n        >\n          Submit\n        </Button>\n      </Grid>\n    </form>\n  );\n}\n","/Users/lauraningel/Desktop/final-project/src/components/Events/SearchEvents.js",[],"/Users/lauraningel/Desktop/final-project/src/components/NotFound.js",[],["157","158"],"/Users/lauraningel/Desktop/final-project/src/components/Events/ModalUpdateEvent.js",[],["159","160"],"/Users/lauraningel/Desktop/final-project/src/components/Events/FormUpdateEvent.js",["161"],"import React from \"react\";\nimport { Grid, TextField, Button } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport axios from \"axios\";\n\nconst useStyles = makeStyles({\n  formInputs: {\n    width: \"100%\",\n  },\n});\n\nexport default function FormUpdateEvent({\n  setMyEvents,\n  selectedEvent,\n  setSelectedEvent,\n  setOpenEditEvent,\n  setAllEvents,\n}) {\n  const classes = useStyles();\n\n  // HANDLE FORM INPUT\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    // changing the state here prevents the \"controlled input\" warning\n    setSelectedEvent((prev) => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  // EDIT AN EVENT\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    axios\n      .put(`/api/events/edit`, {\n        selectedEvent: selectedEvent,\n      })\n      .then((res) => {\n        // filter old event info from all events AND curr user's event arr\n        setAllEvents((prevEvents) =>\n          [...prevEvents].filter((el) => el._id !== selectedEvent._id)\n        );\n        setMyEvents((prevEvents) =>\n          [...prevEvents].filter((el) => el._id !== selectedEvent._id)\n        );\n        // put new updated event back in all events && into curr user's event arr\n        setAllEvents((prevEvents) => [...prevEvents, res.data]);\n        setMyEvents((prevEvents) => [...prevEvents, res.data]);\n        // close modal\n        setOpenEditEvent(false);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <Grid item xs={12}>\n          <TextField\n            className={classes.formInputs}\n            name=\"title\"\n            label=\"Title\"\n            variant=\"outlined\"\n            type=\"text\"\n            margin=\"dense\"\n            value={selectedEvent.title}\n            onChange={handleChange}\n            required={true}\n            inputProps={{ maxLength: 24 }}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            className={classes.formInputs}\n            id=\"outlined-multiline-static\"\n            name=\"description\"\n            label=\"Description\"\n            multiline\n            rows={4}\n            margin=\"dense\"\n            variant=\"outlined\"\n            onChange={handleChange}\n            value={selectedEvent.description}\n            required={true}\n            inputProps={{ maxLength: 400 }}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            className={classes.formInputs}\n            name=\"date\"\n            label=\"Date\"\n            variant=\"outlined\"\n            type=\"date\"\n            margin=\"dense\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n            value={selectedEvent.date}\n            onChange={handleChange}\n            InputProps={{\n              inputProps: { min: new Date().toISOString().slice(0, 10) },\n            }}\n          />\n        </Grid>\n        <TextField\n          className={classes.formInputs}\n          name=\"time\"\n          label=\"Time\"\n          variant=\"outlined\"\n          type=\"time\"\n          margin=\"dense\"\n          variant=\"outlined\"\n          InputLabelProps={{\n            shrink: true,\n            step: 300, // 5min\n          }}\n          value={selectedEvent.time}\n          // inputProps={{\n          //   step: 300, // 5 min\n          // }}\n          onChange={handleChange}\n          required={true}\n        />\n        <Grid item xs={6}>\n          <TextField\n            className={classes.formInputs}\n            name=\"street\"\n            label=\"Street\"\n            variant=\"outlined\"\n            type=\"text\"\n            margin=\"dense\"\n            value={selectedEvent.address.street}\n            onChange={handleChange}\n            required={true}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            className={classes.formInputs}\n            name=\"number\"\n            label=\"Number\"\n            variant=\"outlined\"\n            type=\"text\"\n            margin=\"dense\"\n            value={selectedEvent.address.number}\n            onChange={handleChange}\n            required={true}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            className={classes.formInputs}\n            name=\"zip\"\n            label=\"Zip code\"\n            variant=\"outlined\"\n            type=\"text\"\n            margin=\"dense\"\n            value={selectedEvent.address.zip}\n            onChange={handleChange}\n            required={true}\n          />\n        </Grid>\n        <Grid item xs={6}>\n          <TextField\n            className={classes.formInputs}\n            name=\"city\"\n            label=\"City\"\n            variant=\"outlined\"\n            type=\"text\"\n            margin=\"dense\"\n            value={selectedEvent.address.city}\n            onChange={handleChange}\n            required={true}\n          />\n        </Grid>\n        <Button\n          variant=\"outlined\"\n          type=\"submit\"\n          className={classes.formInputs}\n          style={{ marginTop: \"2em\" }}\n        >\n          Submit\n        </Button>\n      </Grid>\n    </form>\n  );\n}\n","/Users/lauraningel/Desktop/final-project/src/components/User/Users.js",[],"/Users/lauraningel/Desktop/final-project/src/components/User/UserProfile.js",["162"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../../App.css\";\nimport noData from \"../../assets/noData.png\";\nimport bkg from \"../../assets/detailPage.png\";\nimport axios from \"axios\";\nimport NavBar from \"../NavBar\";\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Container,\n  Box,\n  ListItem,\n  Paper,\n  ListItemText,\n  TextField,\n  Card,\n  CardMedia,\n  CardContent,\n  Hidden,\n} from \"@material-ui/core\";\nimport SentimentSatisfiedOutlinedIcon from \"@material-ui/icons/SentimentSatisfiedOutlined\";\nimport SentimentVeryDissatisfiedIcon from \"@material-ui/icons/SentimentVeryDissatisfied\";\nimport UserEventSection from \"./UserEventSection\";\n\nconst useStyles = makeStyles((theme) => ({\n  heroContent: {\n    backgroundImage: `url(${bkg})`,\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    padding: theme.spacing(2),\n  },\n  heroButtons: {\n    margin: theme.spacing(1),\n  },\n  container: {\n    textAlign: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    marginBottom: theme.spacing(2),\n    paddingTop: theme.spacing(2),\n    paddingBottom: theme.spacing(2),\n  },\n  picContainer: {\n    textAlign: \"center\",\n    marginBottom: theme.spacing(2),\n    padding: theme.spacing(2),\n    opacity: \"80%\",\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(4),\n  },\n  eventContainer: {\n    paddingTop: theme.spacing(2),\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  careCardContainer: {\n    marginTop: theme.spacing(2),\n  },\n  wishlistContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  card: {\n    height: \"250px\",\n    marginBottom: theme.spacing(2),\n  },\n  cardMedia: {\n    height: \"75%\",\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function UserProfile({\n  currUser,\n  setCurrUser,\n  setCredentials,\n  handleLogout,\n  myRepo,\n  myWishlist,\n  setMyWishlist,\n  setAllEvents,\n  myEvents,\n  setMyEvents,\n  needsCare,\n  setAllUsers,\n}) {\n  const classes = useStyles();\n\n  // PROFILE PIC STATES\n  const [selectedPic, setSelectedPic] = useState(null);\n  const [pathToImg, setPathToImg] = useState(null);\n\n  // HANDLE PROFILE PIC UPLOAD\n  const handleChange = (e) => {\n    setSelectedPic(e.target.files[0]);\n  };\n\n  const handleUpload = (e) => {\n    e.preventDefault();\n    const data = new FormData();\n    data.append(\"profile_pic\", selectedPic);\n    axios\n      .post(\"/api/users/upload-profile-pic\", data, {\n        headers: {\n          accept: \"application/json\",\n          \"Accept-Language\": \"en-US,en;q=0.8\",\n          \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n        },\n      })\n      .then((res) => {\n        // SET STATE IN PROFILE\n        setPathToImg(res.data.pathToImage);\n        // UPDATE CURR USER PIC IN APP\n        setCurrUser((prev) => ({\n          ...prev,\n          profileImg: res.data.pathToImage,\n        }));\n        // UPDATE THIS USER IN ALL USERS ARR\n        setAllUsers((prev) => {\n          let userToUpdate = [...prev].find((el) => el._id === currUser._id);\n          userToUpdate.profileImg = res.data.pathToImage;\n          return [\n            ...prev.filter((el) => el._id !== currUser._id),\n            userToUpdate,\n          ];\n        });\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n  };\n\n  // DELETE A PLANT FROM CURR USER WISHLIST\n  const handleDelete = (name) => {\n    axios\n      .delete(`/api/users/wish`, { data: { name } })\n      .then((res) => {\n        setMyWishlist((prevWish) => [...prevWish].filter((el) => el !== name));\n      })\n      .catch((err) => console.log(err.message));\n  };\n\n  // FILL REPO PLANTS WITH ARCHETYPE DATA\n  const plantDetails = (name) => {\n    return myRepo.filter((el) => el.plant.latin === name)[0];\n  };\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <NavBar\n        setCurrUser={setCurrUser}\n        setCredentials={setCredentials}\n        handleLogout={handleLogout}\n      />\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            {/* Profile Picture */}\n            <Paper className={classes.picContainer}>\n              <Typography variant=\"h2\">\n                {currUser ? (\n                  <span> hi there, {currUser.username}</span>\n                ) : (\n                  <span>no one is logged in</span>\n                )}\n              </Typography>\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <Hidden smDown>\n                  <SentimentSatisfiedOutlinedIcon fontSize=\"large\" />\n                </Hidden>\n                {currUser ? (\n                  <div\n                    style={{\n                      width: \"200px\",\n                      height: \"200px\",\n                      marginTop: \"10px\",\n                      marginLeft: \"20px\",\n                      marginRight: \"20px\",\n                      overflow: \"hidden\",\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                    }}\n                  >\n                    <img\n                      src={`${process.env.REACT_APP_BACKEND_API_HEROKU}/images/user/${currUser.profileImg}`}\n                      alt=\"profile-pic\"\n                    />\n                  </div>\n                ) : (\n                  <div>Loading...</div>\n                )}\n                <Hidden smDown>\n                  <SentimentSatisfiedOutlinedIcon fontSize=\"large\" />\n                </Hidden>\n              </Box>\n              <label htmlFor=\"file-upload\" className=\"custom-file-upload\">\n                change pic\n              </label>\n              <TextField\n                id=\"file-upload\"\n                type=\"file\"\n                name=\"profile_pic\"\n                onChange={(e) => handleChange(e)}\n              />\n              <Button onClick={handleUpload}>upload</Button>\n            </Paper>\n            {/* Button to Plant Repo */}\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Link to=\"/repo\" style={{ textDecoration: \"none\" }}>\n                    <Button variant=\"contained\" color=\"primary\">\n                      my plants\n                    </Button>\n                  </Link>\n                </Grid>\n                <Grid item>\n                  <Link to=\"/messenger\" style={{ textDecoration: \"none\" }}>\n                    <Button variant=\"contained\" color=\"primary\">\n                      messages\n                    </Button>\n                  </Link>\n                </Grid>\n              </Grid>\n            </div>\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* CARE CALENDAR */}\n          <Grid item xs={12}>\n            <Paper className={classes.container}>\n              <Typography variant=\"h2\">care calendar</Typography>\n              <Typography>babies that need your attention today:</Typography>\n              {!myRepo.length ? (\n                <Box>\n                  <img\n                    src={noData}\n                    style={{ width: \"100px\" }}\n                    alt=\"plant pot\"\n                  />\n                  <Typography>start by adding some plants</Typography>\n                </Box>\n              ) : null}\n              {myRepo.length && !needsCare.length ? (\n                <Box>\n                  <img\n                    src={noData}\n                    style={{ width: \"100px\" }}\n                    alt=\"plant pot\"\n                  />\n                  <Typography>no plant care today!</Typography>\n                </Box>\n              ) : null}\n              {needsCare.length ? (\n                <Container className={classes.careCardContainer}>\n                  {needsCare.length &&\n                    myRepo.length &&\n                    needsCare.map((el, idx) => (\n                      <Card className={classes.card} key={idx}>\n                        <CardMedia\n                          className={classes.cardMedia}\n                          image={`${\n                            process.env.REACT_APP_BACKEND_API_HEROKU\n                          }/images/plants/${plantDetails(el).plant.srcImg}`}\n                          title=\"Image title\"\n                        />\n                        <CardContent className={classes.cardContent}>\n                          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                            {plantDetails(el).nickname || el}\n                          </Typography>\n                        </CardContent>\n                      </Card>\n                    ))}\n                </Container>\n              ) : null}\n              <Box>\n                <Link to=\"/repo\">\n                  <Button>go to my plant repo</Button>\n                </Link>\n              </Box>\n            </Paper>\n          </Grid>\n\n          {/* WISHLIST */}\n          <Grid item xs={12}>\n            <Paper className={classes.container}>\n              <Box\n                display=\"flex\"\n                direction=\"column\"\n                justifyContent=\"space-between\"\n              >\n                <img\n                  src={noData}\n                  style={{ width: \"30px\", marginRight: \"10px\" }}\n                  alt=\"plant pot\"\n                />\n                <Typography variant=\"h2\">wishlist</Typography>\n                <img\n                  src={noData}\n                  style={{ width: \"30px\", marginLeft: \"10px\" }}\n                  alt=\"plant pot\"\n                />\n              </Box>\n              <Grid item xs={12} sm={4} className={classes.wishlistContainer}>\n                {myWishlist.length ? (\n                  myWishlist.map((el, idx) => (\n                    <ListItem key={idx}>\n                      <ListItemText>{el}</ListItemText>\n                      <Button onClick={() => handleDelete(el)}>x</Button>\n                    </ListItem>\n                  ))\n                ) : (\n                  <Box>\n                    <Typography>start by adding some plants</Typography>\n                    <Link to=\"/catalog\">\n                      <Button>inspiration</Button>\n                    </Link>\n                  </Box>\n                )}\n              </Grid>\n            </Paper>\n          </Grid>\n\n          {/* EVENTS */}\n          <Box textAlign=\"center\">\n            <Typography variant=\"h2\">your events</Typography>\n            <Typography>time to mingle with other plant parents</Typography>\n            {myEvents.length ? (\n              <Grid container spacing={4} className={classes.eventContainer}>\n                {myEvents.map((card, idx) => (\n                  <UserEventSection\n                    key={idx}\n                    card={card}\n                    currUser={currUser}\n                    setAllEvents={setAllEvents}\n                    setMyEvents={setMyEvents}\n                    myEvents={myEvents}\n                  />\n                ))}\n              </Grid>\n            ) : (\n              <Box\n                className={classes.eventContainer}\n                display=\"flex\"\n                flexDirection=\"column\"\n                alignItems=\"center\"\n              >\n                <SentimentVeryDissatisfiedIcon fontSize=\"large\" />\n                <Link to=\"/events\">\n                  <Button>show me all events</Button>\n                </Link>\n              </Box>\n            )}\n          </Box>\n        </Container>\n      </main>\n    </React.Fragment>\n  );\n}\n",["163","164"],"/Users/lauraningel/Desktop/final-project/src/components/User/UserEventSection.js",[],["165","166"],"/Users/lauraningel/Desktop/final-project/src/components/Plants/PlantDetail.js",[],"/Users/lauraningel/Desktop/final-project/src/components/Plants/FormUpdatePlant.js",[],"/Users/lauraningel/Desktop/final-project/src/components/Events/ModalAddEvent.js",[],"/Users/lauraningel/Desktop/final-project/src/components/Plants/PlantRepo.js",[],"/Users/lauraningel/Desktop/final-project/src/components/Plants/PlantCatalog.js",[],"/Users/lauraningel/Desktop/final-project/src/components/Plants/ModalUpdatePlant.js",[],"/Users/lauraningel/Desktop/final-project/src/components/User/VisitedProfile.js",[],"/Users/lauraningel/Desktop/final-project/src/components/User/Messenger.js",[],"/Users/lauraningel/Desktop/final-project/src/components/Plants/FormAddPlant.js",[],"/Users/lauraningel/Desktop/final-project/src/components/Plants/ModalWishlist.js",[],["167","168"],"/Users/lauraningel/Desktop/final-project/src/components/Plants/SearchCatalog.js",[],"/Users/lauraningel/Desktop/final-project/src/contexts/ConversationsProvider.js",["169"],"import React, { useContext, useState, useEffect } from \"react\";\nimport { useSocket } from \"./SocketProvider\";\n\nconst ConversationsContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\n\nexport function ConversationsProvider({\n  currUser,\n  myMessages,\n  setMyMessages,\n  children,\n}) {\n  // myMessages holds chat history sorted by recipient (formatting func is in app)\n  const socket = useSocket();\n\n  const [selectedConvo, setSelectedConvo] = useState(null);\n\n  const addMessageToConversation = ({ recipient, text, sender }) => {\n    // find conversation in all conversations\n    let oldConvo = myMessages.find(\n      (el) => el.contact === recipient || el.contact === sender\n    );\n    // either add new msg to old convo\n    if (oldConvo) {\n      setMyMessages(\n        (prev) =>\n          [\n            ...prev,\n            prev\n              .find((el) => el.contact === oldConvo.contact)\n              .messages.push({ recipient, text, sender }),\n          ].filter((el) => typeof el !== \"number\") // this is awful and you should probably use useReducer instead !\n      );\n    } else {\n      // or create new convo for msg and push to messages arr\n      let newConvo = {\n        contact: sender,\n        messages: [\n          {\n            recipient,\n            sender,\n            text,\n          },\n        ],\n      };\n      setMyMessages((prev) => [...prev, newConvo]);\n    }\n  };\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on(\"receive-message\", addMessageToConversation);\n    // remove old eventListeners so new ones aren't constantly added on top\n    return () => socket.off(\"receive-message\");\n  }, [socket, addMessageToConversation]);\n\n  function sendMessage(recipient, text) {\n    // send a recipient id and the msg text to server\n    socket.emit(\"send-message\", { recipient, text });\n    addMessageToConversation({ recipient, text, sender: currUser._id });\n  }\n\n  const value = {\n    myMessages,\n    setMyMessages,\n    selectedConvo,\n    setSelectedConvo,\n    sendMessage,\n  };\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  );\n}\n",["170","171"],"/Users/lauraningel/Desktop/final-project/src/components/Plants/ModalRepo.js",[],["172","173"],"/Users/lauraningel/Desktop/final-project/src/contexts/SocketProvider.js",[],{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"174","replacedBy":"178"},{"ruleId":"176","replacedBy":"179"},{"ruleId":"174","replacedBy":"180"},{"ruleId":"176","replacedBy":"181"},{"ruleId":"174","replacedBy":"182"},{"ruleId":"176","replacedBy":"183"},{"ruleId":"174","replacedBy":"184"},{"ruleId":"176","replacedBy":"185"},{"ruleId":"186","severity":1,"message":"187","line":111,"column":11,"nodeType":"188","endLine":111,"endColumn":29},{"ruleId":"174","replacedBy":"189"},{"ruleId":"176","replacedBy":"190"},{"ruleId":"174","replacedBy":"191"},{"ruleId":"176","replacedBy":"192"},{"ruleId":"186","severity":1,"message":"187","line":113,"column":11,"nodeType":"188","endLine":113,"endColumn":29},{"ruleId":"193","severity":1,"message":"194","line":102,"column":10,"nodeType":"195","messageId":"196","endLine":102,"endColumn":19},{"ruleId":"174","replacedBy":"197"},{"ruleId":"176","replacedBy":"198"},{"ruleId":"174","replacedBy":"199"},{"ruleId":"176","replacedBy":"200"},{"ruleId":"174","replacedBy":"201"},{"ruleId":"176","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":21,"column":9,"nodeType":"205","endLine":51,"endColumn":4,"suggestions":"206"},{"ruleId":"174","replacedBy":"207"},{"ruleId":"176","replacedBy":"208"},{"ruleId":"174","replacedBy":"209"},{"ruleId":"176","replacedBy":"210"},"no-native-reassign",["211"],"no-negated-in-lhs",["212"],["211"],["212"],["211"],["212"],["211"],["212"],["211"],["212"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["211"],["212"],["211"],["212"],"no-unused-vars","'pathToImg' is assigned a value but never used.","Identifier","unusedVar",["211"],["212"],["211"],["212"],["211"],["212"],"react-hooks/exhaustive-deps","The 'addMessageToConversation' function makes the dependencies of useEffect Hook (at line 58) change on every render. To fix this, wrap the definition of 'addMessageToConversation' in its own useCallback() Hook.","VariableDeclarator",["213"],["211"],["212"],["211"],["212"],"no-global-assign","no-unsafe-negation",{"desc":"214","fix":"215"},"Wrap the definition of 'addMessageToConversation' in its own useCallback() Hook.",{"range":"216","text":"217"},[557,1449],"useCallback(({ recipient, text, sender }) => {\n    // find conversation in all conversations\n    let oldConvo = myMessages.find(\n      (el) => el.contact === recipient || el.contact === sender\n    );\n    // either add new msg to old convo\n    if (oldConvo) {\n      setMyMessages(\n        (prev) =>\n          [\n            ...prev,\n            prev\n              .find((el) => el.contact === oldConvo.contact)\n              .messages.push({ recipient, text, sender }),\n          ].filter((el) => typeof el !== \"number\") // this is awful and you should probably use useReducer instead !\n      );\n    } else {\n      // or create new convo for msg and push to messages arr\n      let newConvo = {\n        contact: sender,\n        messages: [\n          {\n            recipient,\n            sender,\n            text,\n          },\n        ],\n      };\n      setMyMessages((prev) => [...prev, newConvo]);\n    }\n  })"]